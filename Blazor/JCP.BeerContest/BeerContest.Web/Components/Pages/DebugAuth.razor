@page "/debug-auth"
@using System.Security.Claims
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IHttpClientFactory HttpClientFactory

<PageTitle>Debug Authentication</PageTitle>

<h3>Authentication Debug Information</h3>

@if (authState != null)
{
    <div class="card">
        <div class="card-header">
            <h4>Authentication Status</h4>
        </div>
        <div class="card-body">
            <p><strong>Is Authenticated:</strong> @authState.User.Identity?.IsAuthenticated</p>
            <p><strong>Identity Name:</strong> @authState.User.Identity?.Name</p>
        </div>
    </div>

    <div class="card mt-4">
        <div class="card-header">
            <h4>Claims</h4>
        </div>
        <div class="card-body">
            <table class="table">
                <thead>
                    <tr>
                        <th>Type</th>
                        <th>Value</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var claim in authState.User.Claims)
                    {
                        <tr>
                            <td>@claim.Type</td>
                            <td>@claim.Value</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <div class="card mt-4">
        <div class="card-header">
            <h4>Role Information</h4>
        </div>
        <div class="card-body">
            <p><strong>Has Administrator Role:</strong> @authState.User.IsInRole("Administrator")</p>
            <p><strong>Has Judge Role:</strong> @authState.User.IsInRole("Judge")</p>
            <p><strong>Has Participant Role:</strong> @authState.User.IsInRole("Participant")</p>
            
            <h5 class="mt-3">Raw Role Claims:</h5>
            <ul>
                @foreach (var roleClaim in authState.User.Claims.Where(c => c.Type == ClaimTypes.Role))
                {
                    <li>@roleClaim.Value</li>
                }
            </ul>
        </div>
    </div>

    <div class="card mt-4">
        <div class="card-header">
            <h4>Claims Management</h4>
        </div>
        <div class="card-body">
            <p>
                If your role has been changed by an administrator, you can refresh your claims without logging out.
            </p>
            <button class="btn btn-primary" @onclick="RefreshClaims">Refresh Claims</button>
            <button class="btn btn-secondary ms-2" @onclick="ReloadPage">Reload Page</button>

            @if (!string.IsNullOrEmpty(message))
            {
                <div class="alert @(isError ? "alert-danger" : "alert-success") mt-3">
                    @message
                </div>
            }
        </div>
    </div>
}
else
{
    <p>Loading authentication state...</p>
}

@code {
    private AuthenticationState? authState;
    private string message = "";
    private bool isError = false;

    protected override async Task OnInitializedAsync()
    {
        authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    }

    private async Task RefreshClaims()
    {
        try
        {
            message = "Refreshing claims...";
            isError = false;
            StateHasChanged();

            var client = HttpClientFactory.CreateClient();
            var response = await client.PostAsync($"{NavigationManager.BaseUri}api/account/refresh-claims", null);
            
            if (response.IsSuccessStatusCode)
            {
                message = "Claims refreshed successfully. Click 'Reload Page' to see the updated claims.";
                isError = false;
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                message = $"Error refreshing claims: {error}";
                isError = true;
            }
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
            isError = true;
        }
    }

    private void ReloadPage()
    {
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }
}