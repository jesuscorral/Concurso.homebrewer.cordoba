@page "/register-beer"
@using System.ComponentModel.DataAnnotations
@using BeerContest.Application.Features.Beers.Commands.RegisterBeer
@using System.Linq.Expressions
@using System.Threading.Tasks
@using BeerContest.Domain.Models
@using MediatR
@using Microsoft.AspNetCore.Authorization
@inject IMediator Mediator

@attribute [Authorize]

<div class="container mt-4">
    <h2 class="mb-4">Registro de Cerveza</h2>

    <EditForm Model="@beerRegistration" OnValidSubmit="@(async () => await HandleValidSubmitAsync())">
        <DataAnnotationsValidator />
        <ValidationSummary Model="@beerRegistration" />

        <div class="card mb-4">
            <div class="card-header">
                <h4>Información del Participante</h4>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <label for="memberNumber" class="form-label">Número socio ACCE</label>
                    <InputText id="memberNumber" @bind-Value="beerRegistration.ACCEMemberNumber" class="form-control" />
                    <ValidationMessage For="@(() => beerRegistration.ACCEMemberNumber)" />
                </div>

                <div class="mb-3">
                    <label for="fullName" class="form-label">Nombre y apellidos</label>
                    <InputText id="fullName" @bind-Value="beerRegistration.FullName" class="form-control" />
                    <ValidationMessage For="@(() => beerRegistration.FullName)" />
                </div>

                <div class="mb-3">
                    <label for="birthDate" class="form-label">Fecha de nacimiento</label>
                    <InputDate id="birthDate" @bind-Value="beerRegistration.BirthDate" class="form-control" />
                    <ValidationMessage For="@(() => beerRegistration.BirthDate)" />
                </div>

                <div class="mb-3">
                    <label for="phone" class="form-label">Teléfono</label>
                    <InputText id="phone" @bind-Value="beerRegistration.Phone" class="form-control" />
                    <ValidationMessage For="@(() => beerRegistration.Phone)" />
                </div>
            </div>
        </div>

        <div class="card mb-4">
            <div class="card-header">
                <h4>Categoría de Cerveza</h4>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <div class="form-check">
                        <InputRadioGroup @bind-Value="beerRegistration.Category" @bind-Value:after="CategoryChanged" Name="category">
                            <div class="mb-2">
                                <InputRadio Value="@(BeerCategory.ClassicStyles)" id="classicStyles" class="form-check-input" />
                                <label class="form-check-label" for="classicStyles">Estilos clásicos</label>
                            </div>
                            <div>
                                <InputRadio Value="@(BeerCategory.HistoricalAndSpecialtyBeers)" id="historicalStyles" class="form-check-input" />
                                <label class="form-check-label" for="historicalStyles">Historical & Specialty beers</label>
                            </div>
                        </InputRadioGroup>
                    </div>
                </div>

                @if (beerRegistration.Category != BeerCategory.None)
                {
                    <div class="mb-3">
                        <label for="beerStyle" class="form-label">Estilo de Cerveza</label>
                        <InputSelect id="beerStyle" @bind-Value="beerRegistration.BeerStyle" class="form-select">
                            <option value="">-- Seleccione un estilo --</option>
                            @foreach (var style in availableStyles)
                            {
                                <option value="@style">@style</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => beerRegistration.BeerStyle)" />
                    </div>
                }
            </div>
        </div>

        <div class="card mb-4">
            <div class="card-header">
                <h4>Detalles de la Cerveza</h4>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <label for="alcoholContent" class="form-label">Grado de alcohol (%)</label>
                    <InputNumber id="alcoholContent" @bind-Value="beerRegistration.AlcoholContent" class="form-control" />
                    <ValidationMessage For="@(() => beerRegistration.AlcoholContent)" />
                </div>

                <div class="mb-3">
                    <label for="elaborationDate" class="form-label">Fecha de elaboración</label>
                    <InputDate id="elaborationDate" @bind-Value="beerRegistration.ElaborationDate" class="form-control" />  
                    <ValidationMessage For="@(() => beerRegistration.ElaborationDate)" />
                </div>
                <div class="mb-3">
                    <label for="bottleDate" class="form-label">Fecha de embotellado</label>
                    <InputDate id="bottleDate" @bind-Value="beerRegistration.BottleDate" class="form-control" />  
                    <ValidationMessage For="@(() => beerRegistration.BottleDate)" />
                </div>
                <div class="mb-3">
                    <label for="malts" class="form-label">Maltas utilizadas</label>
                    <InputText id="malts" @bind-Value="beerRegistration.Malts" class="form-control" />
                    <ValidationMessage For="@(() => beerRegistration.Malts)" />
                    </div>
                <div class="mb-3">
                    <label for="hops" class="form-label">Lúpulos utilizados</label>
                    <InputText id="hops" @bind-Value="beerRegistration.Hops" class="form-control" />
                    <ValidationMessage For="@(() => beerRegistration.Hops)" />
                    </div>
                <div class="mb-3">
                    <label for="yeast" class="form-label">Levaduras utilizadas</label>
                    <InputText id="yeast" @bind-Value="beerRegistration.Yeast" class="form-control" />
                    <ValidationMessage For="@(() => beerRegistration.Yeast)" />
                </div>
                <div class="mb-3">
                    <label for="additives" class="form-label">Otros ingredientes</label>
                    <InputText id="additives" @bind-Value="beerRegistration.Additives" class="form-control" />
                    <ValidationMessage For="@(() => beerRegistration.Additives)" />
                </div>
                <div class="mb-3">
                    <label for="entryInstructions" class="form-label">Instrucciones de entrada</label>
                    <InputTextArea id="entryInstructions" @bind-Value="beerRegistration.EntryInstructions" class="form-control" rows="3" />
                    <ValidationMessage For="@(() => beerRegistration.EntryInstructions)" />
                </div>
            </div>
        </div>    
        <div class="d-grid gap-2 d-md-flex justify-content-md-end">
            <button type="submit" class="btn btn-primary">Registrar Cerveza</button>
        </div>
    </EditForm>
</div>

@code {

    private BeerRegistrationModel beerRegistration = new();
    private List<string> availableStyles = new();
    private List<string> classicStyles = BeerStyles.GetClassicStyles();

    private List<string> historicalStyles = BeerStyles.GetHistoricalStyles();

    protected override void OnInitialized()
    {
        // Initialize with empty styles until a category is selected
        availableStyles = new List<string>();
    }

    // This method is called after the category value is updated
    private void CategoryChanged()
    {
        // Update available styles based on selected category
        if (beerRegistration.Category == BeerCategory.ClassicStyles)
        {
            availableStyles = classicStyles;
        }
        else if (beerRegistration.Category == BeerCategory.HistoricalAndSpecialtyBeers)
        {
            availableStyles = historicalStyles;
        }
        else
        {
            availableStyles = new List<string>();
        }

        // Reset the selected beer style when category changes
        beerRegistration.BeerStyle = string.Empty;
    }

    private async Task HandleValidSubmitAsync()
    {
        // Here you would typically send the data to your backend
        // For example, using MediatR to send a RegisterBeerCommand
        
        // Example (commented out as we don't have the actual implementation):
        var command = new RegisterBeerCommand
        {
            ACCEMemberNumber = beerRegistration.ACCEMemberNumber,
            FullName = beerRegistration.FullName,
            BirthDate = beerRegistration.BirthDate,
            Phone = beerRegistration.Phone,
            Category = beerRegistration.Category,
            BeerStyle = beerRegistration.BeerStyle,
            AlcoholContent = beerRegistration.AlcoholContent,
            ElaborationDate = beerRegistration.ElaborationDate,
            BottleDate = beerRegistration.BottleDate,
            Malts = beerRegistration.Malts,
            Hops = beerRegistration.Hops,
            Yeast = beerRegistration.Yeast,
            EntryInstructions = beerRegistration.EntryInstructions
        };
        
        var t = await Mediator.Send(command);
        
        // Show success message or navigate to another page
        Console.WriteLine("Form submitted successfully");
        
        // Simulate async operation
        await Task.CompletedTask;
    }

   
}
