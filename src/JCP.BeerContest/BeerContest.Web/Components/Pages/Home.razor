@page "/"
@using System.Timers
@implements IDisposable

<PageTitle>Home - Beer Contest</PageTitle>

<div class="home-bg">
    <div class="home-bg-overlay"></div>
    <div class="home-content">
        <h1 class="home-title">Artisanal Beer Contest</h1>
        <h2 class="home-subtitle">Showcase your brewing skills and compete with the best</h2>
        <div class="home-countdown">
            <h3>Registration Closes In:</h3>
            <div class="home-countdown-boxes">
                <div class="home-countdown-box">
                    <div class="home-countdown-value">@daysLeft</div>
                    <div class="home-countdown-label">Days</div>
                </div>
                <div class="home-countdown-box">
                    <div class="home-countdown-value">@hoursLeft</div>
                    <div class="home-countdown-label">Hours</div>
                </div>
                <div class="home-countdown-box">
                    <div class="home-countdown-value">@minutesLeft</div>
                    <div class="home-countdown-label">Minutes</div>
                </div>
                <div class="home-countdown-box">
                    <div class="home-countdown-value">@secondsLeft</div>
                    <div class="home-countdown-label">Seconds</div>
                </div>
            </div>
        </div>
        <div>
            <a href="/register-beer" class="home-register-btn">
                <i class="fa fa-trophy me-2"></i> Register Your Beer Now!
            </a>
            <div>
                <a href="/rules" class="home-rules-link">
                    <i class="fa fa-info-circle me-2"></i>Contest Rules
                </a>
            </div>
        </div>
    </div>
</div>


@code {
    // Target date for the countdown (June 30, 2025)
    private DateTime targetDate = new DateTime(2025, 6, 30);
    private Timer? timer;
    
    // Countdown values
    private int daysLeft;
    private int hoursLeft;
    private int minutesLeft;
    private int secondsLeft;
    
    protected override void OnInitialized()
    {
        // Set up timer to update every second
        timer = new Timer(1000);
        timer.Elapsed += TimerElapsed;
        timer.AutoReset = true;
        timer.Enabled = true;
        
        // Calculate initial values
        UpdateCountdown();
    }
    
    private void TimerElapsed(object? sender, ElapsedEventArgs e)
    {
        // Update countdown values
        UpdateCountdown();
        
        // Request UI update
        InvokeAsync(StateHasChanged);
    }
    
    private void UpdateCountdown()
    {
        TimeSpan remaining = targetDate - DateTime.Now;
        
        // Handle case where date is in the past
        if (remaining.TotalSeconds <= 0)
        {
            daysLeft = 0;
            hoursLeft = 0;
            minutesLeft = 0;
            secondsLeft = 0;
            return;
        }
        
        // Calculate the components
        daysLeft = remaining.Days;
        hoursLeft = remaining.Hours;
        minutesLeft = remaining.Minutes;
        secondsLeft = remaining.Seconds;
    }
    
    public void Dispose()
    {
        if (timer != null)
        {
            timer.Stop();
            timer.Elapsed -= TimerElapsed;
            timer.Dispose();
        }
    }
}
