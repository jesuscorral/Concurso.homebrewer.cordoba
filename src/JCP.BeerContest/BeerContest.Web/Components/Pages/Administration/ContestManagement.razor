@page "/contest-management"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using BeerContest.Domain.Models
@using BeerContest.Application.Features.Contests.Commands
@using BeerContest.Application.Features.Contests.Queries.GetAllContests
@using BeerContest.Application.Features.Contests.Queries.GetContestById
@using MediatR
@inject IMediator Mediator
@inject AuthenticationStateProvider AuthenticationStateProvider

@attribute [Authorize(Roles = "Administrator")]

<PageTitle>Contest Management</PageTitle>

<h3>Contest Management</h3>

<AuthorizeView Roles="@UserRole.Administrator.ToString()">
    <Authorized Context="authContext">
        @if (contests == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <div class="row mb-4">
                <div class="col-md-12">
                    <div class="card">
                        <div class="card-header">
                            <h5>Registered Contests</h5>
                        </div>
                        <div class="card-body">
                            <div class="table-responsive">
                                <table class="table table-striped">
                                    <thead>
                                        <tr>
                                            <th>ID</th>
                                            <th>Edition</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var contest in contests)
                                        {
                                            <tr class="@(selectedContestId == contest.Id ? "table-primary" : "")">
                                                <td>@contest.Id</td>
                                                <td>@contest.Edition</td>
                                                <td>
                                                    <button class="btn btn-sm btn-primary" @onclick="() => SelectContest(contest.Id)">
                                                        Edit
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row">
                <div class="col-md-12">
                    <div class="card">
                        <div class="card-header">
                            <h5>@(isEditing ? "Edit Contest" : "Create New Contest")</h5>
                        </div>
                        <div class="card-body">
                            <EditForm Model="@contestModel" OnValidSubmit="HandleValidSubmit">
                                <DataAnnotationsValidator />
                                <ValidationSummary />

                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <label for="edition" class="form-label">Edition</label>
                                        <InputText id="edition" @bind-Value="contestModel.Edition" class="form-control" />
                                        <ValidationMessage For="@(() => contestModel.Edition)" />
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <label for="organizerEmail" class="form-label">Organizer Email</label>
                                        <InputText id="organizerEmail" @bind-Value="contestModel.OrganizerEmail" class="form-control" />
                                        <ValidationMessage For="@(() => contestModel.OrganizerEmail)" />
                                    </div>
                                </div>

                                <div class="mb-3">
                                    <label for="description" class="form-label">Description</label>
                                    <InputTextArea id="description" @bind-Value="contestModel.Description" class="form-control" rows="3" />
                                    <ValidationMessage For="@(() => contestModel.Description)" />
                                </div>

                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <label for="registrationStartDate" class="form-label">Registration Start Date</label>
                                        <InputDate id="registrationStartDate" @bind-Value="contestModel.RegistrationStartDate" class="form-control" />
                                        <ValidationMessage For="@(() => contestModel.RegistrationStartDate)" />
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <label for="registrationEndDate" class="form-label">Registration End Date</label>
                                        <InputDate id="registrationEndDate" @bind-Value="contestModel.RegistrationEndDate" class="form-control" />
                                        <ValidationMessage For="@(() => contestModel.RegistrationEndDate)" />
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <label for="shipphingStartDate" class="form-label">Shipping Start Date</label>
                                        <InputDate id="shipphingStartDate" @bind-Value="contestModel.ShipphingStartDate" class="form-control" />
                                        <ValidationMessage For="@(() => contestModel.ShipphingStartDate)" />
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <label for="shipphingEndDate" class="form-label">Shipping End Date</label>
                                        <InputDate id="shipphingEndDate" @bind-Value="contestModel.ShipphingEndDate" class="form-control" />
                                        <ValidationMessage For="@(() => contestModel.ShipphingEndDate)" />
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-md-4 mb-3">
                                        <label for="entryFee1Beer" class="form-label">Entry Fee (€) (1 Beer)</label>
                                        <InputNumber id="entryFee1Beer" @bind-Value="contestModel.EntryFee1Beer" class="form-control" />
                                        <ValidationMessage For="@(() => contestModel.EntryFee1Beer)" />
                                    </div>
                                    <div class="col-md-4 mb-3">
                                        <label for="entryFee2Beer" class="form-label">Entry Fee (€) (2 Beers)</label>
                                        <InputNumber id="entryFee2Beer" @bind-Value="contestModel.EntryFee2Beer" class="form-control" />
                                        <ValidationMessage For="@(() => contestModel.EntryFee2Beer)" />
                                    </div>
                                    <div class="col-md-4 mb-3">
                                        <label for="entryFee3Beer" class="form-label">Entry Fee (€) (3 Beers)</label>
                                        <InputNumber id="entryFee3Beer" @bind-Value="contestModel.EntryFee3Beer" class="form-control" />
                                        <ValidationMessage For="@(() => contestModel.EntryFee3Beer)" />
                                    </div>
                                </div>

                                <div class="row">
                                    <div class="col-md-6 mb-3">
                                        <label for="discount" class="form-label">Discount (€)</label>
                                        <InputNumber id="discount" @bind-Value="contestModel.Discount" class="form-control" />
                                        <ValidationMessage For="@(() => contestModel.Discount)" />
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <label for="maxBeersPerParticipant" class="form-label">Max Beers Per Participant</label>
                                        <InputNumber id="maxBeersPerParticipant" @bind-Value="contestModel.MaxBeersPerParticipant" class="form-control" />
                                        <ValidationMessage For="@(() => contestModel.MaxBeersPerParticipant)" />
                                    </div>
                                </div>

                                <div class="mb-3">
                                    <label for="status" class="form-label">Status</label>
                                    <InputSelect id="status" @bind-Value="contestModel.Status" class="form-select">
                                        @foreach (var status in Enum.GetValues(typeof(ContestStatus)))
                                        {
                                            <option value="@status">@status</option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="@(() => contestModel.Status)" />
                                </div>

                                <!-- Rules and Categories would be more complex and might need separate components -->
                                <!-- For simplicity, we're not including them in this initial implementation -->

                                <div class="mt-4">
                                    @if (isEditing)
                                    {
                                        <button type="submit" class="btn btn-primary">Update Contest</button>
                                        <button type="button" class="btn btn-secondary ms-2" @onclick="CancelEdit">Cancel</button>
                                    }
                                    else
                                    {
                                        <button type="submit" class="btn btn-primary">Create Contest</button>
                                    }
                                </div>
                            </EditForm>
                        </div>
                    </div>
                </div>
            </div>

            @if (!string.IsNullOrEmpty(message))
            {
                <div class="alert @(isError ? "alert-danger" : "alert-success") mt-4">
                    @message
                </div>
            }
        }
    </Authorized>
    <NotAuthorized>
        <div class="container">
            <div class="alert alert-danger">
                <h4>Access Denied</h4>
                <p>You do not have permission to access this page. Only administrators can access the contest management area.</p>
                <a href="/" class="btn btn-primary">Go to Home</a>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<Contest> contests;
    private string selectedContestId;
    private bool isEditing = false;
    private string message;
    private bool isError;

    // Model for the form
    private ContestFormModel contestModel = new ContestFormModel();

    protected override async Task OnInitializedAsync()
    {
        await LoadContests();
    }

    private async Task LoadContests()
    {
        try
        {
            var result = await Mediator.Send(new GetAllContestsQuery());
            contests = result.Data.ToList();
        }
        catch (Exception ex)
        {
            message = $"Error loading contests: {ex.Message}";
            isError = true;
        }
    }

    private async Task SelectContest(string id)
    {
        try
        {
            selectedContestId = id;
            var ret = await Mediator.Send(new GetContestByIdQuery { Id = id });
            var contest = ret.Data;
            if (contest != null)
            {
                // Map the contest to the form model
                contestModel = new ContestFormModel
                {
                    Id = contest.Id,
                    Edition = contest.Edition,
                    Description = contest.Description,
                    OrganizerEmail = contest.OrganizerEmail,
                    RegistrationStartDate = contest.RegistrationStartDate,
                    RegistrationEndDate = contest.RegistrationEndDate,
                    ShipphingStartDate = contest.ShipphingStartDate,
                    ShipphingEndDate = contest.ShipphingEndDate,
                    EntryFee1Beer = contest.EntryFee1Beer,
                    EntryFee2Beer = contest.EntryFee2Beer,
                    EntryFee3Beer = contest.EntryFee3Beer,
                    Discount = contest.Discount,
                    Rules = contest.Rules,
                    Categories = contest.Categories,
                    Status = contest.Status,
                    MaxBeersPerParticipant = contest.MaxBeersPerParticipant
                };
                
                isEditing = true;
                message = "";
            }
        }
        catch (Exception ex)
        {
            message = $"Error loading contest: {ex.Message}";
            isError = true;
        }
    }

    private void CancelEdit()
    {
        isEditing = false;
        selectedContestId = null;
        contestModel = new ContestFormModel();
        message = "";
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (isEditing)
            {
                // Update existing contest
                var command = new UpdateContestCommand
                {
                    Id = contestModel.Id,
                    Edition = contestModel.Edition,
                    Description = contestModel.Description,
                    OrganizerEmail = contestModel.OrganizerEmail,
                    RegistrationStartDate = contestModel.RegistrationStartDate,
                    RegistrationEndDate = contestModel.RegistrationEndDate,
                    ShipphingStartDate = contestModel.ShipphingStartDate,
                    ShipphingEndDate = contestModel.ShipphingEndDate,
                    EntryFee1Beer = contestModel.EntryFee1Beer,
                    EntryFee2Beer = contestModel.EntryFee2Beer,
                    EntryFee3Beer = contestModel.EntryFee3Beer,
                    Discount = contestModel.Discount,
                    Rules = contestModel.Rules,
                    Categories = contestModel.Categories,
                    Status = contestModel.Status,
                    MaxBeersPerParticipant = contestModel.MaxBeersPerParticipant
                };

                var result = await Mediator.Send(command);
                
                if (result.Succeeded)
                {
                    message = "Contest updated successfully.";
                    isError = false;
                    
                    // Refresh the list
                    await LoadContests();
                    
                    // Reset form
                    CancelEdit();
                }
                else
                {
                    message = "Failed to update contest.";
                    isError = true;
                }
            }
            else
            {
                // Create new contest
                var command = new RegisterContestCommand
                {
                    Edition = contestModel.Edition,
                    Description = contestModel.Description,
                    OrganizerEmail = contestModel.OrganizerEmail,
                    RegistrationStartDate = contestModel.RegistrationStartDate,
                    RegistrationEndDate = contestModel.RegistrationEndDate,
                    ShipphingStartDate = contestModel.ShipphingStartDate,
                    ShipphingEndDate = contestModel.ShipphingEndDate,
                    EntryFee1Beer = contestModel.EntryFee1Beer,
                    EntryFee2Beer = contestModel.EntryFee2Beer,
                    EntryFee3Beer = contestModel.EntryFee3Beer,
                    Discount = contestModel.Discount,
                    Rules = contestModel.Rules,
                    Categories = contestModel.Categories,
                    Status = contestModel.Status,
                    MaxBeersPerParticipant = contestModel.MaxBeersPerParticipant
                };

                var result = await Mediator.Send(command);
                if (!string.IsNullOrEmpty(result.Data))
                {
                    message = "Contest created successfully.";
                    isError = false;
                    
                    // Refresh the list
                    await LoadContests();
                    
                    // Reset form
                    contestModel = new ContestFormModel();
                }
                else
                {
                    message = "Failed to create contest.";
                    isError = true;
                }
            }
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
            isError = true;
        }
    }

    // Form model class
    public class ContestFormModel
    {
        public string Id { get; set; }
        public string Edition { get; set; }
        public string Description { get; set; }
        public string OrganizerEmail { get; set; }
        public DateTime RegistrationStartDate { get; set; } = DateTime.Now;
        public DateTime RegistrationEndDate { get; set; } = DateTime.Now.AddMonths(1);
        public DateTime ShipphingStartDate { get; set; } = DateTime.Now.AddMonths(1);
        public DateTime ShipphingEndDate { get; set; } = DateTime.Now.AddMonths(2);
        public double EntryFee1Beer { get; set; }
        public double EntryFee2Beer { get; set; }
        public double EntryFee3Beer { get; set; }
        public double Discount { get; set; } = 0.0;
        public List<ContestRule> Rules { get; set; } = new List<ContestRule>();
        public List<BeerCategory> Categories { get; set; } = new List<BeerCategory>();
        public ContestStatus Status { get; set; } = ContestStatus.Draft;
        public int MaxBeersPerParticipant { get; set; } = 3;
    }
}