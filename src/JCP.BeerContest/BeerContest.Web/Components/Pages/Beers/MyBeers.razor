@page "/my-beers"
@using BeerContest.Application.Features.Beers.Queries.GetParticipantBeersByContestId
@using BeerContest.Application.Features.Contests.Queries.GetAllContests
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using BeerContest.Application.Features.Beers.Queries.GetParticipantBeers
@using BeerContest.Application.Features.Beers.Commands.DeleteBeer
@using BeerContest.Domain.Models
@using System.Security.Claims
@using MediatR
@inject IMediator Mediator
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject IToastService ToastService

@attribute [Authorize(Roles = "Participant, Judge")]

<PageTitle>My Beers - Beer Contest</PageTitle>

<AuthorizeView Roles="@UserRole.Participant.ToString()">
    <Authorized Context="authContext">
        <div class="container mt-4">
            <h2 class="mb-4">My Registered Beers</h2>

            @if (beers == null  || isLoading)
            {
                <div class="d-flex justify-content-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (!beers.Any())
            {
                <div class="alert alert-info" role="alert">
                    You haven't registered any beers yet.
                </div>
                <div class="mt-3">
                    <a href="/register-beer" class="btn btn-primary">Register New Beer</a>
                </div>
            }
            else 
            {
                <div class="row">
                    @foreach (var beer in beers)
                    {
                        <div class="col-md-6 mb-4">
                            <div class="card h-100">
                                <div class="card-header d-flex justify-content-between align-items-center">
                                    <h5 class="mb-0">@beer.BeerStyle</h5>
                                    <span class="badge bg-primary">@beer.Category</span>
                                </div>
                                <div class="card-body">
                                    <div class="row mb-2">
                                        <div class="col-md-6">
                                            <strong>Alcohol Content:</strong> @beer.AlcoholContent%
                                        </div>
                                        <div class="col-md-6">
                                            <strong>Elaboration Date:</strong> @beer.ElaborationDate.ToShortDateString()
                                        </div>
                                    </div>
                                    <div class="row mb-2">
                                        <div class="col-md-6">
                                            <strong>Bottle Date:</strong> @beer.BottleDate.ToShortDateString()
                                        </div>
                                        <div class="col-md-6">
                                            <strong>Created At:</strong> @beer.CreatedAt.ToShortDateString()
                                        </div>
                                    </div>
                                    <div class="mb-2">
                                        <strong>Malts:</strong> @beer.Malts
                                    </div>
                                    <div class="mb-2">
                                        <strong>Hops:</strong> @beer.Hops
                                    </div>
                                    <div class="mb-2">
                                        <strong>Yeast:</strong> @beer.Yeast
                                    </div>
                                    @if (!string.IsNullOrEmpty(beer.Additives))
                                    {
                                        <div class="mb-2">
                                            <strong>Additives:</strong> @beer.Additives
                                        </div>
                                    }
                                    @if (!string.IsNullOrEmpty(beer.EntryInstructions))
                                    {
                                        <div class="mb-2">
                                            <strong>Entry Instructions:</strong> @beer.EntryInstructions
                                        </div>
                                    }
                                </div>
                                @if (beer.ContestStatus.Equals(ContestStatus.RegistrationOpen))
                                {
                                    <div class="card-footer d-flex justify-content-end">
                                        <button class="btn btn-danger me-2" @onclick="() => DeleteBeer(beer.Id)">Delete</button>
                                        <button class="btn btn-primary" @onclick="() => UpdateBeer(beer.Id)">Update</button>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>

                @if (beers.Count() < 3 && (contests.Any(x => x.Status == ContestStatus.RegistrationOpen)))
                {
                    <div class="mt-4">
                        <a href="/register-beer" class="btn btn-success">Register New Beer</a>
                    </div>
                }
            }
        </div>
    </Authorized>
</AuthorizeView>

@code {
    private IEnumerable<BeerWithContestStatus> beers;
    private string email;
    private List<Contest> contests = new();
    private string message;
    private bool isLoading = true;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadContests();

        var user = await GetUser();


        if (user?.Identity?.IsAuthenticated == true)
        {
            beers = await GetBeers(user);
        }
        else
        {
            Navigation.NavigateTo("Account/Login", forceLoad: true);
        }

        isLoading = false;
    }
    private async Task<ClaimsPrincipal> GetUser()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;
        return user;
    }

    private async Task<IEnumerable<BeerWithContestStatus>> GetBeers(ClaimsPrincipal user)
    {
        IEnumerable<BeerWithContestStatus> beersWithContestSatus;

        email = user.FindFirst(ClaimTypes.Email)?.Value;

        if (!string.IsNullOrEmpty(email) && contests?.Any() == true)
        {
            var query = new GetParticipantBeersQuery
                {
                    ParticipantEmail = email
                };

            beersWithContestSatus = await Mediator.Send(query);
        }
        else
        {
            beersWithContestSatus = new List<BeerWithContestStatus>();
        }

        return beersWithContestSatus;

    }

    private async Task LoadContests()
    {
        try
        {
            var result = await Mediator.Send(new GetAllContestsQuery());
            contests = result.ToList();
        }
        catch (Exception ex)
        {
            message = $"Error loading contests: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }


    private async Task DeleteBeer(string beerId)
    {
        try
        {
            await Mediator.Send(new DeleteBeerCommand { BeerId = beerId });

            var user = await GetUser();
            beers = await GetBeers(user);

            ToastService.ShowSuccess("Beer deleted successfully", settings => { settings.Timeout = 5; settings.PauseProgressOnHover = true; });
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error deleting beer: {ex.Message}", settings => { settings.Timeout = 5; settings.PauseProgressOnHover = true; });
        }
    }

    private void UpdateBeer(string beerId)
    {
        // Navigate to update page
        Navigation.NavigateTo($"/update-beer/{beerId}");
    }

}