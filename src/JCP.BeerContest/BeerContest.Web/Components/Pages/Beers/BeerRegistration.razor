@page "/register-beer"
@using System.ComponentModel.DataAnnotations
@using System.Linq.Expressions
@using System.Security.Claims
@using System.Threading.Tasks
@using BeerContest.Application.Features.Beers.Commands.RegisterBeer
@using BeerContest.Application.Features.Beers.Commands.RegisterParticipant
@using BeerContest.Application.Features.Beers.Queries.GetParticipantBeers
@using BeerContest.Application.Features.Beers.Queries.GetParticipantBeersByContestId
@using BeerContest.Application.Features.Contests.Queries.GetAllContests
@using BeerContest.Domain.Models
@using BeerContest.Web.Helpers
@using BeerContest.Application.Common.Models
@using MediatR
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@inject IMediator Mediator
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject BeerContest.Web.Services.ToastService ToastService

@attribute [Authorize(Roles = "Participant, Judge")]

<div class="container mt-4">
    <h2 class="mb-4">Registro de Cerveza</h2>

    @if (isLoading)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Cargando...</span>
            </div>
        </div>
    }
    else if (errorMessage != null)
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }
    else if (maxBeerRached)
    {
        <div class="alert alert-warning" role="alert">
            Has alcanzado el l�mite m�ximo de 3 cervezas registradas. Por favor, elimina una cerveza antes de registrar una nueva.
        </div>
    }
    else if (contests.Any(x => x.Status == ContestStatus.RegistrationOpen))
    {
        <EditForm Model="@beerRegistration" OnValidSubmit="@(async () => await HandleValidSubmitAsync())">
            <DataAnnotationsValidator />
            <ValidationSummary Model="@beerRegistration" />

            <div class="card mb-4">
                <div class="card-header">
                    <h4>Informaci�n del Participante</h4>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label for="memberNumber" class="form-label">N�mero socio ACCE</label>
                        <InputText id="memberNumber" @bind-Value="beerRegistration.ACCEMemberNumber" class="form-control" />
                        <ValidationMessage For="@(() => beerRegistration.ACCEMemberNumber)" />
                    </div>

                    <div class="mb-3">
                        <label for="fullName" class="form-label">Nombre y apellidos</label>
                        <InputText id="fullName" @bind-Value="beerRegistration.FullName" class="form-control" />
                        <ValidationMessage For="@(() => beerRegistration.FullName)" />
                    </div>

                    <div class="mb-3">
                        <label for="birthDate" class="form-label">Fecha de nacimiento</label>
                        <InputDate id="birthDate" @bind-Value="beerRegistration.BirthDate" class="form-control" />
                        <ValidationMessage For="@(() => beerRegistration.BirthDate)" />
                    </div>

                    <div class="mb-3">
                        <label for="phone" class="form-label">Tel�fono</label>
                        <InputText id="phone" @bind-Value="beerRegistration.Phone" class="form-control" />
                        <ValidationMessage For="@(() => beerRegistration.Phone)" />
                    </div>
                </div>
            </div>

            <div class="card mb-4">
                <div class="card-header">
                    <h4>Categor�a de Cerveza</h4>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <div class="form-check">
                            <InputRadioGroup @bind-Value="beerRegistration.Category" @bind-Value:after="CategoryChanged" Name="category">
                                <div class="mb-2">
                                    <InputRadio Value="@(BeerCategory.ClassicStyles)" id="classicStyles" class="form-check-input" />
                                    <label class="form-check-label" for="classicStyles">Estilos cl�sicos</label>
                                </div>
                                <div>
                                    <InputRadio Value="@(BeerCategory.HistoricalAndSpecialtyBeers)" id="historicalStyles" class="form-check-input" />
                                    <label class="form-check-label" for="historicalStyles">Historical & Specialty beers</label>
                                </div>
                            </InputRadioGroup>
                        </div>
                    </div>


                    <div class="mb-3">
                        <label for="beerStyle" class="form-label">Estilo de Cerveza</label>
                        <InputSelect id="beerStyle" @bind-Value="beerRegistration.BeerStyle" class="form-select">
                            <option value="">-- Seleccione un estilo --</option>
                            @foreach (var style in availableStyles)
                            {
                                <option value="@style">@style</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => beerRegistration.BeerStyle)" />
                    </div>
                </div>
            </div>

            <div class="card mb-4">
                <div class="card-header">
                    <h4>Detalles de la Cerveza</h4>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label for="alcoholContent" class="form-label">Grado de alcohol (%)</label>
                        <InputNumber id="alcoholContent" @bind-Value="beerRegistration.AlcoholContent" class="form-control" />
                        <ValidationMessage For="@(() => beerRegistration.AlcoholContent)" />
                    </div>

                    <div class="mb-3">
                        <label for="elaborationDate" class="form-label">Fecha de elaboraci�n</label>
                        <InputDate id="elaborationDate" @bind-Value="beerRegistration.ElaborationDate" class="form-control" />
                        <ValidationMessage For="@(() => beerRegistration.ElaborationDate)" />
                    </div>
                    <div class="mb-3">
                        <label for="bottleDate" class="form-label">Fecha de embotellado</label>
                        <InputDate id="bottleDate" @bind-Value="beerRegistration.BottleDate" class="form-control" />
                        <ValidationMessage For="@(() => beerRegistration.BottleDate)" />
                    </div>
                    <div class="mb-3">
                        <label for="malts" class="form-label">Maltas utilizadas</label>
                        <InputText id="malts" @bind-Value="beerRegistration.Malts" class="form-control" />
                        <ValidationMessage For="@(() => beerRegistration.Malts)" />
                    </div>
                    <div class="mb-3">
                        <label for="hops" class="form-label">L�pulos utilizados</label>
                        <InputText id="hops" @bind-Value="beerRegistration.Hops" class="form-control" />
                        <ValidationMessage For="@(() => beerRegistration.Hops)" />
                    </div>
                    <div class="mb-3">
                        <label for="yeast" class="form-label">Levaduras utilizadas</label>
                        <InputText id="yeast" @bind-Value="beerRegistration.Yeast" class="form-control" />
                        <ValidationMessage For="@(() => beerRegistration.Yeast)" />
                    </div>
                    <div class="mb-3">
                        <label for="additives" class="form-label">Otros ingredientes</label>
                        <InputText id="additives" @bind-Value="beerRegistration.Additives" class="form-control" />
                        <ValidationMessage For="@(() => beerRegistration.Additives)" />
                    </div>
                    <div class="mb-3">
                        <label for="entryInstructions" class="form-label">Instrucciones de entrada</label>
                        <InputTextArea id="entryInstructions" @bind-Value="beerRegistration.EntryInstructions" class="form-control" rows="3" />
                        <ValidationMessage For="@(() => beerRegistration.EntryInstructions)" />
                    </div>
                </div>
            </div>
            <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                <button type="submit" class="btn btn-primary">Registrar Cerveza</button>
            </div>
        </EditForm>
    }
    else
    {
        <div class="alert alert-warning" role="alert">
            Actualmente no hay concursos abiertos para el registro de cervezas.
        </div>
    }


</div>

@code {

    private BeerRegistrationModel beerRegistration = new()
    {
        ACCEMemberNumber = string.Empty,
        FullName = string.Empty,
        Phone = string.Empty,
        BeerStyle = string.Empty,
        Malts = string.Empty,
        Hops = string.Empty,
        Yeast = string.Empty,
        Additives = string.Empty,
        EntryInstructions = string.Empty
    };
    private List<string> availableStyles = new();
    private List<string> classicStyles = BeerStyles.GetClassicStyles();
    private List<string> historicalStyles = BeerStyles.GetHistoricalStyles();
    private List<Contest> contests = new();
    private string? errorMessage;
    private bool isLoading = true;
    private bool maxBeerRached = false;
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Initialize with empty styles until a category is selected
        beerRegistration.Category = BeerCategory.ClassicStyles;
        availableStyles = classicStyles;
        await LoadContests();
        await CheckMaxBeerReached();
    }

    private async Task CheckMaxBeerReached()
    {
        var beers = await GetBeers();
        maxBeerRached = beers.Count() >= 3; // TODO: Remove harcoded value and get this value from Contest
    }

    // This method is called after the category value is updated
    private void CategoryChanged()
    {
        // Update available styles based on selected category
        if (beerRegistration.Category == BeerCategory.ClassicStyles)
        {
            availableStyles = classicStyles;
        }
        else if (beerRegistration.Category == BeerCategory.HistoricalAndSpecialtyBeers)
        {
            availableStyles = historicalStyles;
        }
        else
        {
            availableStyles = new List<string>();
        }

        // Reset the selected beer style when category changes
        beerRegistration.BeerStyle = string.Empty;
    }

    private async Task<IEnumerable<Beer>> GetBeers()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;

        IEnumerable<BeerWithContestStatus> beersWithContestStatus = new List<BeerWithContestStatus>(); 

        var email = user.FindFirst(ClaimTypes.Email)?.Value;

        if (!string.IsNullOrEmpty(email) && contests?.Any(x => x.Status == ContestStatus.RegistrationOpen) == true)
        {
            try
            {
                var query = new GetParticipantBeersByContestIdQuery
                {
                    ParticipantEmail = email,
                    ContestId = contests.FirstOrDefault(x => x.Status == ContestStatus.RegistrationOpen)?.Id
                };

                var response = await Mediator.Send(query);
                
                if (response.Succeeded)
                {
                    beersWithContestStatus = response.Data ?? new List<BeerWithContestStatus>();
                }
                else
                {
                    ToastService.ShowError(response.Message);
                }
            }
            catch (Exception ex)
            {
                errorMessage = $"Error retrieving beers: {ex.Message}";
            }
        }

        return beersWithContestStatus;
    }

    private async Task LoadContests()
    {
        try
        {
            var response = await Mediator.Send(new GetAllContestsQuery());
            
            if (response.Succeeded)
            {
                contests = response.Data?.ToList() ?? new List<Contest>();
            }
            else
            {
                errorMessage = response.Message;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading contests: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleValidSubmitAsync()
    {
        try
        {
            var participantCommand = await BuildRegisterParticipantCommand(beerRegistration);
            var participantResponse = await Mediator.Send(participantCommand);
            
            if (!participantResponse.Succeeded)
            {
                ToastService.ShowError(participantResponse.Message);
                return;
            }
            
            var participantId = participantResponse.Data;
            
            var beerCommand = await BuildRegisterBeerCommand(beerRegistration, participantId);
            var beerResponse = await Mediator.Send(beerCommand);
            
            if (beerResponse.Succeeded)
            {
                ToastService.ShowSuccess(beerResponse.Message ?? "Cerveza registrada correctamente");
                
                await CheckMaxBeerReached();
                // Clear the form
                ResetForm();
            }
            else
            {
                ToastService.ShowError(beerResponse.Message ?? "Error al registrar la cerveza");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error registering beer: {ex.Message}");
            ToastService.ShowError($"Error al registrar la cerveza: {ex.Message}");
        }
    }

    private async Task<RegisterBeerCommand> BuildRegisterBeerCommand(BeerRegistrationModel beerRegistration, string participantId)
    {
        var emailUser = await UserInfoHelper.GetEmailLoggedUserAsync(AuthenticationStateProvider);

        return new RegisterBeerCommand
            {
                BeerStyle = beerRegistration.BeerStyle,
                AlcoholContent = beerRegistration.AlcoholContent,
                ElaborationDate = beerRegistration.ElaborationDate,
                BottleDate = beerRegistration.BottleDate,
                Malts = beerRegistration.Malts,
                Hops = beerRegistration.Hops,
                Yeast = beerRegistration.Yeast,
                Additives = beerRegistration.Additives,
                Category = beerRegistration.Category,
                ParticipantEmail = emailUser,
                EntryInstructions = beerRegistration.EntryInstructions,
                ParticipantId = participantId,
                // TODO - Gestionar null
                ContestId = contests?.FirstOrDefault(x => x.Status == ContestStatus.RegistrationOpen)?.Id // By default only will be open one Contest to register
            };
    }

    private async Task<RegisterParticipantCommand> BuildRegisterParticipantCommand(BeerRegistrationModel beerRegistration)
    {
        var emailUser = await UserInfoHelper.GetEmailLoggedUserAsync(AuthenticationStateProvider);

        return new RegisterParticipantCommand
            {
                ACCEMemberNumber = beerRegistration.ACCEMemberNumber,
                FullName = beerRegistration.FullName,
                BirthDate = beerRegistration.BirthDate,
                Phone = beerRegistration.Phone,
                EmailUser = emailUser,
            };
    }

    private void ResetForm()
    {
        // Create a new instance to reset all fields
        beerRegistration = new()
        {
            ACCEMemberNumber = string.Empty,
            FullName = string.Empty,
            Phone = string.Empty,
            BeerStyle = string.Empty,
            Malts = string.Empty,
            Hops = string.Empty,
            Yeast = string.Empty,
            Additives = string.Empty,
            EntryInstructions = string.Empty,
            Category = BeerCategory.ClassicStyles
        };
        // Set default category and styles
        availableStyles = classicStyles;
        // Force UI refresh
        StateHasChanged();
    }
}
