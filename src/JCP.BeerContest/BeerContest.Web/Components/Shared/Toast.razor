@using BeerContest.Web.Services
@inject ToastService ToastService
@implements IDisposable

<div class="toast-container">
    @foreach (var toast in ToastService.Toasts.Where(t => t.IsVisible))
    {
        <div class="toast toast-@(toast.Type.ToString().ToLower()) fade-in" role="alert">
            <div class="toast-content">
                <div class="toast-icon">
                    @switch (toast.Type)
                    {
                        case ToastType.Success:
                            <i class="fa fa-check-circle"></i>
                            break;
                        case ToastType.Error:
                            <i class="fa fa-exclamation-circle"></i>
                            break;
                        case ToastType.Warning:
                            <i class="fa fa-exclamation-triangle"></i>
                            break;
                        case ToastType.Info:
                            <i class="fa fa-info-circle"></i>
                            break;
                    }
                </div>
                <div class="toast-message">
                    @toast.Message
                </div>
                <button type="button" class="toast-close" @onclick="() => ToastService.RemoveToast(toast.Id)">
                    <i class="fa fa-times"></i>
                </button>
            </div>
        </div>
    }
</div>

@code {
    protected override void OnInitialized()
    {
        ToastService.OnToastChanged += StateHasChanged;
    }

    public void Dispose()
    {
        ToastService.OnToastChanged -= StateHasChanged;
    }
}
